/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package NationalWeatherServiceClient;

import static org.junit.Assert.assertEquals;

import com.google.common.collect.ImmutableMap;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import gov.noaa.WeatherServiceGenerator;
import gov.noaa.alerts.AlertService;
import gov.noaa.alerts.AlertTypes;
import gov.noaa.alerts.Alerts;
import gov.noaa.glossary.Glossary;
import gov.noaa.glossary.GlossaryService;
import gov.noaa.stations.StationService;
import gov.noaa.stations.Stations;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import lombok.SneakyThrows;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import org.junit.Test;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class LibraryTest {
  class LocalDateTimeDeserializer implements JsonDeserializer < LocalDateTime > {
    @Override
    public LocalDateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
        throws JsonParseException {
      TimeZone tz = TimeZone.getTimeZone("UTC");
      System.out.println(json.getAsString());
      System.out.println(LocalDateTime.parse(json.getAsString(),
          DateTimeFormatter.ISO_DATE_TIME));
      return LocalDateTime.parse(json.getAsString(),
          DateTimeFormatter.ISO_DATE_TIME);
    }
  }


  static class TestWeatherServiceGenerator {
    private static final String BASE_URL = "https://weatherservice.free.beeceptor.com";
    private static Retrofit.Builder builder =
        new Retrofit.Builder().baseUrl(BASE_URL).addConverterFactory(GsonConverterFactory.create());

    private static Retrofit retrofit = builder.build();

    private static OkHttpClient.Builder httpClient = new OkHttpClient.Builder();

    public static <S> S createService(Class<S> serviceClass) {
      return retrofit.create(serviceClass);
    }

    public static <S> S createService(Class<S> serviceClass, final String token) {
      if (token != null) {
        httpClient.interceptors().clear();
        httpClient.addInterceptor(
            chain -> {
              Request original = chain.request();
              Request request = original.newBuilder().header("Authorization", token).build();
              return chain.proceed(request);
            });
        builder.client(httpClient.build());
        retrofit = builder.build();
      }
      return retrofit.create(serviceClass);
    }
    }

    @SneakyThrows
    @Test public void stationsTest() {
      FileInputStream input = new FileInputStream("src/test/resources/stations.json");
      Scanner scanner = new Scanner(input);
      StringBuilder json = new StringBuilder();
      while(scanner.hasNext())
        json.append(scanner.nextLine());

        GsonBuilder gsonBuilder = new GsonBuilder();
            Stations stations = gsonBuilder.create().fromJson(json.toString(),Stations.class);
        StationService service = WeatherServiceGenerator.createService(StationService.class);
        Call<Stations> callSync = service.getStations(ImmutableMap.of("state","AZ","limit","2"));
        try{
            Response<Stations> response = callSync.execute();
            Stations stations1 = response.body();
            assertEquals(stations,stations1);
        }catch (IOException e){
            Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
        }


    }

    @SneakyThrows
    @Test public void glossaryTest(){
      FileInputStream input = new FileInputStream("src/test/resources/glossary.json");
      Scanner scanner = new Scanner(input);
      StringBuilder json = new StringBuilder();
      while(scanner.hasNext())
        json.append(scanner.nextLine());


      GsonBuilder gsonBuilder = new GsonBuilder();
      Glossary glossary = gsonBuilder.create().fromJson(json.toString(),Glossary.class);
      GlossaryService service = WeatherServiceGenerator.createService(GlossaryService.class);
      Call<Glossary> callSync = service.getGlossaryItems();
      try{
        Response<Glossary> response = callSync.execute();
        Glossary glossary1 = response.body();
        assertEquals(glossary,glossary1);
      }catch (IOException e){
        Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
      }
    }

  @SneakyThrows
  @Test public void alertTypeTest(){
    FileInputStream input = new FileInputStream("src/test/resources/AlertTypes.json");
    Scanner scanner = new Scanner(input);
    StringBuilder json = new StringBuilder();
    while(scanner.hasNext())
      json.append(scanner.nextLine());


    GsonBuilder gsonBuilder = new GsonBuilder();
    AlertTypes alertTypes = gsonBuilder.create().fromJson(json.toString(),AlertTypes.class);
    AlertService service = WeatherServiceGenerator.createService(AlertService.class);
    Call<AlertTypes> callSync = service.getAlertTypes();
    try{
      Response<AlertTypes> response = callSync.execute();
      AlertTypes glossary1 = response.body();
      assertEquals(alertTypes,glossary1);
    }catch (IOException e){
      Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
    }
  }

  @SneakyThrows
  @Test
  public void alertsTest(){
      FileInputStream input = new FileInputStream("src/test/resources/alerts.json");
      Scanner scanner = new Scanner(input);
      StringBuilder json = new StringBuilder();
      while(scanner.hasNext())
        json.append(scanner.nextLine());
      System.out.println(json);

      ImmutableMap<String,String> params = ImmutableMap.<String, String>builder().put("active","true")
          .put("area","CA,CO,CT").put("certainty","likely").put("status","actual").put("limit","3").build();

      GsonBuilder gsonBuilder = new GsonBuilder();
      Alerts alerts = gsonBuilder.create().fromJson(json.toString(),Alerts.class);
      AlertService service = TestWeatherServiceGenerator.createService(AlertService.class);
      Call<Alerts> callSync = service.getAlerts(params);
      try{
        Response<Alerts> response = callSync.execute();
        Alerts alertsResponse = response.body();
        assertEquals(alerts,alertsResponse);
      }catch (IOException e){
        Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
      }
    }

  @Test
  @SneakyThrows
  public void ActiveAlertsTest() throws FileNotFoundException {
    FileInputStream input = new FileInputStream("src/test/resources/alerts.json");
    Scanner scanner = new Scanner(input);
    StringBuilder json = new StringBuilder();
    while(scanner.hasNext())
      json.append(scanner.nextLine());
    System.out.println(json);

    ImmutableMap<String,String> params = ImmutableMap.<String, String>builder()
        .put("area","CA,CO,CT").put("certainty","likely").put("status","actual").put("limit","3").build();

    GsonBuilder gsonBuilder = new GsonBuilder();
    Alerts alerts = gsonBuilder.create().fromJson(json.toString(),Alerts.class);
    AlertService service = TestWeatherServiceGenerator.createService(AlertService.class);
    Call<Alerts> callSync = service.getAlerts(params);
    try{
      Response<Alerts> response = callSync.execute();
      Alerts alertsResponse = response.body();
      assertEquals(alerts,alertsResponse);
    }catch (IOException e){
      Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
    }
  }

  @SneakyThrows
  @Test
  public void AlertByIDTest(){
    FileInputStream input = new FileInputStream("src/test/resources/IDAlert.json");
    Scanner scanner = new Scanner(input);
    StringBuilder json = new StringBuilder();
    while(scanner.hasNext())
      json.append(scanner.nextLine());
    System.out.println(json);

    GsonBuilder gsonBuilder = new GsonBuilder();
    Alerts alerts = gsonBuilder.create().fromJson(json.toString(),Alerts.class);
    AlertService service = TestWeatherServiceGenerator.createService(AlertService.class);
    Call<Alerts> callSync = service.getAlertByID("NWS-IDP-PROD-3988177-3384711");
    try{
      Response<Alerts> response = callSync.execute();
      Alerts alertsResponse = response.body();
      assertEquals(alerts,alertsResponse);
    }catch (IOException e){
      Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
    }
  }

  @SneakyThrows
  @Test
  public void getRegionByIDTest(){
    FileInputStream input = new FileInputStream("src/test/resources/getRegion.json");
    Scanner scanner = new Scanner(input);
    StringBuilder json = new StringBuilder();
    while(scanner.hasNext())
      json.append(scanner.nextLine());
    System.out.println(json);

    GsonBuilder gsonBuilder = new GsonBuilder();
    Alerts alerts = gsonBuilder.create().fromJson(json.toString(),Alerts.class);
    AlertService service = TestWeatherServiceGenerator.createService(AlertService.class);
    Call<Alerts> callSync = service.getAlertsByMarineRegion("GL");
    try{
      Response<Alerts> response = callSync.execute();
      Alerts alertsResponse = response.body();
      assertEquals(alerts,alertsResponse);
    }catch (IOException e){
      Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
    }
  }

  @SneakyThrows
  @Test
  public void getAlertByAreaIDTest(){
    FileInputStream input = new FileInputStream("src/test/resources/getAlertsByArea.json");
    Scanner scanner = new Scanner(input);
    StringBuilder json = new StringBuilder();
    while(scanner.hasNext())
      json.append(scanner.nextLine());
    System.out.println(json);

    GsonBuilder gsonBuilder = new GsonBuilder();
    Alerts alerts = gsonBuilder.create().fromJson(json.toString(),Alerts.class);
    AlertService service = TestWeatherServiceGenerator.createService(AlertService.class);
    Call<Alerts> callSync = service.getAlertsByArea("CO");
    try{
      Response<Alerts> response = callSync.execute();
      Alerts alertsResponse = response.body();
      assertEquals(alerts,alertsResponse);
    }catch (IOException e){
      Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
    }
  }

  @SneakyThrows
  @Test
  public void ZoneByIDTest() {
    FileInputStream input = new FileInputStream("src/test/resources/zonebyzoneid.json");
    Scanner scanner = new Scanner(input);
    StringBuilder json = new StringBuilder();
    while(scanner.hasNext())
      json.append(scanner.nextLine());
    System.out.println(json);

    GsonBuilder gsonBuilder = new GsonBuilder();
    Alerts alerts = gsonBuilder.create().fromJson(json.toString(),Alerts.class);
    AlertService service = TestWeatherServiceGenerator.createService(AlertService.class);
    Call<Alerts> callSync = service.getZoneByID("AMZ158");
    try{
      Response<Alerts> response = callSync.execute();
      Alerts alertsResponse = response.body();
      assertEquals(alerts,alertsResponse);
    }catch (IOException e){
      Logger.getLogger(String.valueOf(callSync.getClass())).log(Level.SEVERE,e.getMessage());
    }
  }
}
